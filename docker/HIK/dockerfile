# Use an appropriate base image
FROM ubuntu:22.04

ARG ARCH
ENV MINIFORGE_URL_ARCH=https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh
ENV MINIFORGE_URL_AMD64=https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh

ENV TZ=America/Los_Angeles
ENV MVCAM_COMMON_RUNENV=/opt/MVS/lib
ENV LD_LIBRARY_PATH=/opt/MVS/lib/64:/opt/MVS/lib/32

# Install necessary dependencies
RUN apt-get update && apt-get install -y \
    wget \
    unzip \
    python3 \
    python3-pip \
    build-essential \
    git \
    mesa-utils \
    openssh-server \
    libhdf5-dev \
    usbutils \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Download and install the appropriate Hik driver based on architecture
RUN cd /tmp && \
    wget https://www.hikrobotics.com/cn2/source/support/software/MVS_STD_GML_V2.1.2_231116.zip && \
    unzip MVS_STD_GML_V2.1.2_231116.zip && \
    if [ "$ARCH" = "arm64" ]; then \
        dpkg -i MVS-2.1.2_aarch64_20231116.deb; \
    elif [ "$ARCH" = "amd64" ]; then \
        dpkg -i MVS-2.1.2_x86_64_20231116.deb; \
    fi

RUN mkdir -p /opt/MVS/bin/fonts

# Download and install Miniforge based on architecture
RUN if [ "$ARCH" = "arm64" ]; then \
        wget --quiet https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh -O /tmp/miniforge.sh; \
    elif [ "$ARCH" = "amd64" ]; then \
        wget --quiet https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh -O /tmp/miniforge.sh; \
    fi && \
    chmod +x /tmp/miniforge.sh && \
    /bin/bash /tmp/miniforge.sh -b -p /opt/conda && \
    rm /tmp/miniforge.sh

# Update PATH environment variable
ENV PATH=/opt/conda/bin:$PATH

# Create conda environment and install packages
RUN /opt/conda/bin/conda create -y --name imswitch python=3.10

RUN /opt/conda/bin/conda install -n imswitch -y -c conda-forge h5py numcodecs && \
    conda clean --all -f -y

# Clone the config folder
RUN git clone https://github.com/openUC2/ImSwitchConfig /root/ImSwitchConfig 

# Clone the repository and install dependencies
RUN git clone https://github.com/openUC2/imSwitch /tmp/ImSwitch && \
    cd /tmp/ImSwitch && \
    git checkout NOQT && \
    /bin/bash -c "source /opt/conda/bin/activate imswitch && pip install -e /tmp/ImSwitch" 

# Install UC2-REST
RUN git clone https://github.com/openUC2/UC2-REST /tmp/UC2-REST && \
    cd /tmp/UC2-REST && \
    /bin/bash -c "source /opt/conda/bin/activate imswitch && pip install -e /tmp/UC2-REST"

# Setup SSH server
RUN mkdir /var/run/sshd && \
    echo 'root:password' | chpasswd && \
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

# Start SSH server and run the ImSwitch application
CMD ["/bin/bash", "-c", "\
    echo 'LSUSB' && lsusb && \
    /usr/sbin/sshd -D & \
    ls /root/ImSwitchConfig && \
    if [ \"$UPDATE_GIT\" = \"true\" ]; then \
        cd /tmp/ImSwitch && \
        git pull && \
        /bin/bash -c 'source /opt/conda/bin/activate imswitch && pip install -e /tmp/ImSwitch'; \
    fi && \
    if [ \"$UPDATE_CONFIG\" = \"true\" ]; then \
        cd /root/ImSwitchConfig && \
        git pull origin main; \
    fi && \
    source /opt/conda/bin/activate imswitch && \
    HEADLESS=${HEADLESS:-1} && \
    HTTP_PORT=${HTTP_PORT:-8001} && \
    CONFIG_FILE=${CONFIG_FILE:-/root/ImSwitchConfig/imcontrol_setup/example_virtual_microscope.json} && \
    USB_DEVICE_PATH=${USB_DEVICE_PATH:-/dev/bus/usb} && \
    python3 -m imswitch --headless $HEADLESS --config-file $CONFIG_FILE --http-port $HTTP_PORT --ssl 1"]
